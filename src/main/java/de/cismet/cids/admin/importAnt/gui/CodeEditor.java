
/*
 * CodeEditor.java
 *
 * Created on 12. November 2003, 15:39
 */

package de.cismet.cids.admin.importAnt.gui;
import de.cismet.cids.admin.importAnt.*;
import de.cismet.cids.admin.importAnt.castorGenerated.*;
import de.cismet.tools.gui.javakit.JavaContext;
import de.cismet.tools.gui.javakit.JavaEditorKit;
import de.cismet.tools.gui.javakit.Token;


import javax.swing.*;
import java.lang.reflect.*;
import java.util.HashSet;
import java.io.*;
import java.awt.*;
import javax.swing.text.*;
/**
 *
 * @author  hell
 */
public class CodeEditor extends javax.swing.JPanel {
    private final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(this.getClass());
    Code code;
    /** Creates new form CodeEditor */
    public CodeEditor() {
        this(null);
    }
    
    public CodeEditor(Code code) {
        if (code==null) {
            code=new Code();
        }
        this.code=code;
        initComponents();
     }
    RuntimeProps runtimeProps;
    public void setContent(Code content,RuntimeProps runtimeProps) {
        if (content==null) {
            content=new Code();
        }
        this.runtimeProps=runtimeProps;
        code=content;
        this.txtImport.setText(code.getImport());
        cboFunctions.removeAllItems();
        for (int i=0; i<code.getFunctionCount();++i) {
            this.cboFunctions.addItem(new InternalFunction(code.getFunction(i)));
        }
    }
    
    
    public Code getContent() {
        Code c=new Code();
        c.setImport(txtImport.getText());
        for (int i=0;i<cboFunctions.getItemCount();++i) {
            Function f=new Function();
            f.setComment(((Function)cboFunctions.getItemAt(i)).getComment());
            f.setContent(((Function)cboFunctions.getItemAt(i)).getContent());
            c.addFunction(f);
        }
        return c;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        panInfos = new javax.swing.JPanel();
        lblImport = new javax.swing.JLabel();
        sepImport = new javax.swing.JSeparator();
        lblFunctions = new javax.swing.JLabel();
        sepFunctions = new javax.swing.JSeparator();
        cboFunctions = new javax.swing.JComboBox();
        lblCboFunctions = new javax.swing.JLabel();
        tbaTools = new javax.swing.JToolBar();
        cmdAddFunction = new javax.swing.JButton();
        cmdDeleteFunction = new javax.swing.JButton();
        cmdSyntaxCheck = new javax.swing.JButton();
        cmdTest = new javax.swing.JButton();
        lblActions = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        scpImport = new javax.swing.JScrollPane();
        txtImport = new javax.swing.JEditorPane();
        JavaEditorKit importKit = new JavaEditorKit();
        txtImport.setEditorKitForContentType("text/java", importKit);
        txtImport.setContentType("text/java");
        txtImport.setBackground(Color.white);
        txtImport.setFont(new Font("Courier", 0, 12));
        txtImport.setEditable(true);

        // PENDING(prinz) This should have a customizer and
        // be serialized.  This is a bogus initialization.
        JavaContext importStyles = importKit.getStylePreferences();
        Style importS;
        importS = importStyles.getStyleForScanValue(Token.COMMENT.getScanValue());
        StyleConstants.setForeground(importS, new Color(102, 153, 153));
        importS = importStyles.getStyleForScanValue(Token.STRINGVAL.getScanValue());
        StyleConstants.setForeground(importS, new Color(102, 153, 102));
        Color importKeyword = new Color(102, 102, 255);
        for (int code = 70; code <= 130; code++) {
            importS = importStyles.getStyleForScanValue(code);
            if (importS != null) {
                StyleConstants.setForeground(importS, importKeyword);
            }
        }
        panFunctions = new javax.swing.JPanel();
        gpaFunctionTitle = new de.cismet.cids.tools.gui.farnsworth.GradientJPanel();
        lblFunction = new javax.swing.JLabel();
        panFunctionEditor = new javax.swing.JPanel();
        scpFunctions = new javax.swing.JScrollPane();
        txtFunctionEditor = new javax.swing.JEditorPane();
        JavaEditorKit functionKit = new JavaEditorKit();
        txtFunctionEditor.setEditorKitForContentType("text/java", functionKit);
        txtFunctionEditor.setContentType("text/java");
        txtFunctionEditor.setBackground(Color.white);
        txtFunctionEditor.setFont(new Font("Courier", 0, 12));
        txtFunctionEditor.setEditable(true);

        // PENDING(prinz) This should have a customizer and
        // be serialized.  This is a bogus initialization.
        JavaContext styles = functionKit.getStylePreferences();
        Style s;
        s = styles.getStyleForScanValue(Token.COMMENT.getScanValue());
        StyleConstants.setForeground(s, new Color(102, 153, 153));
        s = styles.getStyleForScanValue(Token.STRINGVAL.getScanValue());
        StyleConstants.setForeground(s, new Color(102, 153, 102));
        Color keyword = new Color(102, 102, 255);
        for (int code = 70; code <= 130; code++) {
            s = styles.getStyleForScanValue(code);
            if (s != null) {
                StyleConstants.setForeground(s, keyword);
            }
        }

        setLayout(new java.awt.GridBagLayout());

        setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(10, 10, 10, 10)));
        panInfos.setLayout(new java.awt.GridBagLayout());

        lblImport.setForeground(javax.swing.UIManager.getDefaults().getColor("CheckBoxMenuItem.selectionBackground"));
        lblImport.setText("Import");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 10, 5);
        panInfos.add(lblImport, gridBagConstraints);

        sepImport.setMinimumSize(new java.awt.Dimension(1, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        panInfos.add(sepImport, gridBagConstraints);

        lblFunctions.setForeground(javax.swing.UIManager.getDefaults().getColor("CheckBoxMenuItem.selectionBackground"));
        lblFunctions.setText("Funktionen");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        panInfos.add(lblFunctions, gridBagConstraints);

        sepFunctions.setMinimumSize(new java.awt.Dimension(1, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        panInfos.add(sepFunctions, gridBagConstraints);

        cboFunctions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFunctionsActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panInfos.add(cboFunctions, gridBagConstraints);

        lblCboFunctions.setText("Auswahl:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panInfos.add(lblCboFunctions, gridBagConstraints);

        tbaTools.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        tbaTools.setFloatable(false);
        tbaTools.setRollover(true);
        tbaTools.setMargin(new java.awt.Insets(0, 20, 0, 0));
        cmdAddFunction.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/add_att.gif")));
        cmdAddFunction.setToolTipText("neue Funktion");
        cmdAddFunction.setFocusPainted(false);
        cmdAddFunction.setMargin(new java.awt.Insets(2, 7, 1, 7));
        cmdAddFunction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddFunctionActionPerformed(evt);
            }
        });

        tbaTools.add(cmdAddFunction);

        cmdDeleteFunction.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/delete_edit.gif")));
        cmdDeleteFunction.setToolTipText("Funktion entfernen");
        cmdDeleteFunction.setFocusPainted(false);
        cmdDeleteFunction.setMargin(new java.awt.Insets(2, 7, 1, 7));
        cmdDeleteFunction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteFunctionActionPerformed(evt);
            }
        });

        tbaTools.add(cmdDeleteFunction);

        cmdSyntaxCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/jdkcompliance_tab.gif")));
        cmdSyntaxCheck.setToolTipText("Syntax Check");
        cmdSyntaxCheck.setFocusPainted(false);
        cmdSyntaxCheck.setMargin(new java.awt.Insets(2, 7, 1, 7));
        cmdSyntaxCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSyntaxCheckActionPerformed(evt);
            }
        });

        tbaTools.add(cmdSyntaxCheck);

        cmdTest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/test.gif")));
        cmdTest.setToolTipText("Test");
        cmdTest.setFocusPainted(false);
        cmdTest.setMargin(new java.awt.Insets(2, 7, 1, 7));
        cmdTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTestActionPerformed(evt);
            }
        });

        tbaTools.add(cmdTest);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panInfos.add(tbaTools, gridBagConstraints);

        lblActions.setText("Aktionen:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        panInfos.add(lblActions, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        panInfos.add(jPanel1, gridBagConstraints);

        scpImport.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        txtImport.setMinimumSize(new java.awt.Dimension(10, 22));
        txtImport.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtImportFocusLost(evt);
            }
        });

        scpImport.setViewportView(txtImport);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panInfos.add(scpImport, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(panInfos, gridBagConstraints);

        panFunctions.setLayout(new java.awt.BorderLayout());

        panFunctions.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        gpaFunctionTitle.setLayout(new java.awt.GridBagLayout());

        gpaFunctionTitle.setForeground(java.awt.Color.lightGray);
        lblFunction.setText("Funktion:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.75;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 1, 5);
        gpaFunctionTitle.add(lblFunction, gridBagConstraints);

        panFunctions.add(gpaFunctionTitle, java.awt.BorderLayout.NORTH);

        panFunctionEditor.setLayout(new java.awt.GridBagLayout());

        panFunctionEditor.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(0, 0, 0, 0)));
        scpFunctions.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        txtFunctionEditor.setMinimumSize(new java.awt.Dimension(20, 22));
        txtFunctionEditor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFunctionEditorFocusLost(evt);
            }
        });
        txtFunctionEditor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFunctionEditorKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFunctionEditorKeyTyped(evt);
            }
        });

        scpFunctions.setViewportView(txtFunctionEditor);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panFunctionEditor.add(scpFunctions, gridBagConstraints);

        panFunctions.add(panFunctionEditor, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.8;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(panFunctions, gridBagConstraints);

    }//GEN-END:initComponents
 
    private void txtFunctionEditorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFunctionEditorKeyReleased
        ((Function)(this.cboFunctions.getSelectedItem())).setContent(txtFunctionEditor.getText());
    }//GEN-LAST:event_txtFunctionEditorKeyReleased

    private void txtFunctionEditorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFunctionEditorKeyTyped
        ((Function)(this.cboFunctions.getSelectedItem())).setContent(txtFunctionEditor.getText());
    }//GEN-LAST:event_txtFunctionEditorKeyTyped

    private void txtFunctionEditorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFunctionEditorFocusLost
       ((Function)(this.cboFunctions.getSelectedItem())).setContent(txtFunctionEditor.getText());
    }//GEN-LAST:event_txtFunctionEditorFocusLost

    private void txtImportFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtImportFocusLost
        Function f=(Function)(this.cboFunctions.getSelectedItem());
        if (f!=null) f.setContent(txtFunctionEditor.getText());
    }//GEN-LAST:event_txtImportFocusLost

    private void cmdTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTestActionPerformed
       createTestClass(true);
    }//GEN-LAST:event_cmdTestActionPerformed

    private void cmdAddFunctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddFunctionActionPerformed
        String descr=JOptionPane.showInputDialog(this,"Kurzbeschreibung der Funktion:","Neue Funktion",JOptionPane.OK_CANCEL_OPTION);
        Function f=new Function();
        f.setComment(descr);
        //f.setContent("// "+descr);
        cboFunctions.addItem(new InternalFunction(f));
    }//GEN-LAST:event_cmdAddFunctionActionPerformed

    private void cboFunctionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboFunctionsActionPerformed
        if (cboFunctions.getSelectedItem()!=null) {
            this.txtFunctionEditor.setText(((InternalFunction)(cboFunctions.getSelectedItem())).getContent());
            txtFunctionEditor.setCaretPosition(0);
        }
        else {
            txtFunctionEditor.setText("");
        }
        
    }//GEN-LAST:event_cboFunctionsActionPerformed

    private void cmdSyntaxCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSyntaxCheckActionPerformed
        createTestClass(false);
        
    }//GEN-LAST:event_cmdSyntaxCheckActionPerformed

    private void cmdDeleteFunctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteFunctionActionPerformed
        if (JOptionPane.showConfirmDialog(this,"Soll die Funktion wirklich gel\u00F6scht werden?","Funktion l\u00F6schen",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            cboFunctions.removeItem(cboFunctions.getSelectedItem());
        }
    }//GEN-LAST:event_cmdDeleteFunctionActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboFunctions;
    private javax.swing.JButton cmdAddFunction;
    private javax.swing.JButton cmdDeleteFunction;
    private javax.swing.JButton cmdSyntaxCheck;
    private javax.swing.JButton cmdTest;
    private de.cismet.cids.tools.gui.farnsworth.GradientJPanel gpaFunctionTitle;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblActions;
    private javax.swing.JLabel lblCboFunctions;
    private javax.swing.JLabel lblFunction;
    private javax.swing.JLabel lblFunctions;
    private javax.swing.JLabel lblImport;
    private javax.swing.JPanel panFunctionEditor;
    private javax.swing.JPanel panFunctions;
    private javax.swing.JPanel panInfos;
    private javax.swing.JScrollPane scpFunctions;
    private javax.swing.JScrollPane scpImport;
    private javax.swing.JSeparator sepFunctions;
    private javax.swing.JSeparator sepImport;
    private javax.swing.JToolBar tbaTools;
    private javax.swing.JEditorPane txtFunctionEditor;
    private javax.swing.JEditorPane txtImport;
    // End of variables declaration//GEN-END:variables
    
    private void createTestClass(boolean test) {
        
        StringBuffer sb=new StringBuffer("");
        String tempDir;
//        if (runtimeProps==null) {
//            tempDir=".";
//        }
//        else {
//            tempDir=runtimeProps.getTmpDir();
//        }
        String fileSep=System.getProperty("file.separator");
        File f=new File("."+fileSep+"CidsDynamicClassTest.java");
        sb.append(txtImport.getText()).append("\n");
        sb.append("public class CidsDynamicClassTest {");
        sb.append("private static java.sql.Connection targetConnection=null;\n");
        sb.append("public static ").append(txtFunctionEditor.getText()).append("\n");
        sb.append("}");
        DynClass dc=new DynClass(sb.toString(), f, "."+fileSep);
        try {
            dc.compile(false);
        }
        catch (DynamicCompilingException dcEx) {
            
            //log.error("Fehler beim Kompilieren",dcEx);
            getMainFrame().addOutput(new OutputCompilingError(dcEx));
            f.delete();
            JOptionPane.showMessageDialog(this,"Funktion konnte nicht kompiliert werden.","Check durchgef\u00FChrt",JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (test) {
            String source=dc.getCode();
            
            Class tester=dc.getTheClass();
            Method[] methods=tester.getDeclaredMethods();
            for (int i=0; i<methods.length; ++i) {
                getMainFrame().addOutput(new OutputTestFunction(tester,methods[i]));
            }
        } else {
            JOptionPane.showMessageDialog(this,"Funktion syntaktisch korrekt","Check durchgef\u00FChrt",JOptionPane.INFORMATION_MESSAGE);
        }

    }

    private Import getMainFrame() {
        return ((Import)(getTopLevelAncestor()));
    }
}
class InternalFunction extends Function {
    public InternalFunction(Function f) {
        super();
        super.setComment(f.getComment());
        super.setContent(f.getContent());
    }
    public String toString() {
        return super.getComment();
    }
}
