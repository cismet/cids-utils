/*
 * OutputTestFunction.java
 *
 * Created on 18. November 2003, 15:21
 */

package de.cismet.cids.admin.importAnt.gui;
import java.lang.reflect.*;
/**
 *
 * @author  hell
 */
public class OutputTestFunction extends javax.swing.JInternalFrame {
   private final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(this.getClass());
     Method method;
    Class tester;
    javax.swing.JTextField[] params=null;
    /** Creates new form OutputTestFunction */
    public OutputTestFunction(Class tester,Method method) {
        this.method=method;
        this.tester=tester;
        initComponents();
        java.awt.GridBagConstraints gridBagConstraints;
        this.setTitle("Test: " + method.getName());
        Class[] ca=method.getParameterTypes();
        params=new javax.swing.JTextField[ca.length];
        for (int i=0; i<ca.length;++i) {
            
            javax.swing.JLabel lblParam = new javax.swing.JLabel();
            javax.swing.JTextField txtParam = new javax.swing.JTextField();
            lblParam.setFont(new java.awt.Font("Dialog", 1, 11));
            lblParam.setText("\u00dcbergabeparameter "+(i+1));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = i;
            gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 5);
            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
            gridBagConstraints.weightx = 1.0;
            panParam.add(lblParam, gridBagConstraints);

            txtParam.setColumns(10);
            txtParam.setFont(new java.awt.Font("Dialog", 0, 11));
            txtParam.setToolTipText(ca[i].getName());
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = i;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 5);
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            panParam.add(txtParam, gridBagConstraints);
            revalidate();
            params[i]=txtParam;
        }

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        panParam = new javax.swing.JPanel();
        panOutput = new javax.swing.JPanel();
        txtOut = new javax.swing.JTextArea();
        cmdGo = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Test");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/test.gif")));
        panParam.setLayout(new java.awt.GridBagLayout());

        panParam.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(10, 10, 10, 10)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(panParam, gridBagConstraints);

        panOutput.setLayout(new java.awt.GridBagLayout());

        panOutput.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(10, 10, 10, 10)));
        txtOut.setEditable(false);
        txtOut.setFont(new java.awt.Font("Dialog", 0, 12));
        txtOut.setForeground((java.awt.Color) javax.swing.UIManager.getDefaults().get("CheckBoxMenuItem.selectionBackground"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panOutput.add(txtOut, gridBagConstraints);

        cmdGo.setFont(new java.awt.Font("Dialog", 1, 11));
        cmdGo.setForeground((java.awt.Color) javax.swing.UIManager.getDefaults().get("CheckBoxMenuItem.acceleratorSelectionBackground"));
        cmdGo.setText("Test");
        cmdGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGoActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        panOutput.add(cmdGo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(panOutput, gridBagConstraints);

        pack();
    }//GEN-END:initComponents

    private void cmdGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGoActionPerformed
        Object[] oa=new Object[method.getParameterTypes().length];
        Class[] ca=method.getParameterTypes();
        
        try {
            for (int i=0; i<oa.length;++i) {
                String p=params[i].getText();
                if (ca[i].equals(Boolean.class)||ca[i].equals(boolean.class)) {
                    oa[i]=new Boolean(p);
                }
                else if (ca[i].equals(Double.class)||ca[i].equals(double.class)) {
                    oa[i]=new Double(p);
                }
                else if (ca[i].equals(Integer.class)||ca[i].equals(int.class)) {
                    oa[i]=new Integer(p);
                }
                else if (ca[i].equals(Long.class)||ca[i].equals(long.class)) {
                    oa[i]=new Long(p);
                }
                else if (ca[i].equals(String.class)){
                    oa[i]=p;
                }
                else {
                    oa[i]=null;
                }
            }
        }
        catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(this,"Fehler beim Zuweisen der Parameter \n("+ex+").","Fehler",javax.swing.JOptionPane.ERROR_MESSAGE);
            log.error("Fehler beim Testen einer Funktion.Fehler beim Zuweisen der Parameter.",ex);
            return;
        }
        Object o=null;
        try {
             o = method.invoke(tester, oa);
             if (o==null) {
                 this.txtOut.setText("NULL");
             }
             else {
                this.txtOut.setText(o.toString());
             }
        }
        catch (java.lang.reflect.InvocationTargetException itEx) {
            javax.swing.JOptionPane.showMessageDialog(this,"Die Funktion erzeugt eine Ausnahme \n("+itEx.getTargetException()+")","Fehler",javax.swing.JOptionPane.ERROR_MESSAGE);
        
        }
        catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(this,"Fehler beim Aufruf der Funktion \n("+ex+").","Fehler",javax.swing.JOptionPane.ERROR_MESSAGE);
            log.error("Fehler beim Testen einer Funktion",ex);
        }
    }//GEN-LAST:event_cmdGoActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdGo;
    private javax.swing.JPanel panOutput;
    private javax.swing.JPanel panParam;
    private javax.swing.JTextArea txtOut;
    // End of variables declaration//GEN-END:variables
    
    
    
    
}
