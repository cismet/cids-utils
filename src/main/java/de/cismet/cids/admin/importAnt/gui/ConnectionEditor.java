/*
 * ConnectionEditor.java
 *
 * Created on 12. November 2003, 15:39
 */

package de.cismet.cids.admin.importAnt.gui;
import javax.swing.*;
import de.cismet.cids.admin.importAnt.castorGenerated.*;
import java.util.*;
import de.cismet.cids.tools.gui.farnsworth.*;
import java.sql.*;


/**
 *
 * @author  hell
 */
public class ConnectionEditor extends javax.swing.JPanel {
    private final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(this.getClass());

    ConnectionInfo ci;
    
    /** Creates new form ConnectionEditor */
    public ConnectionEditor() {
        this(null);
    }
    
    public ConnectionEditor(ConnectionInfo ci) {
        this.ci=ci;
        initComponents();
        myInit();
        setContent(ci);
        
    }
    
    public void myInit() {
    }
    
    
    
    public ConnectionInfo getContent() {
        SourceJdbcConnectionInfo source=new SourceJdbcConnectionInfo();
        TargetJdbcConnectionInfo target=new TargetJdbcConnectionInfo();
        source.setDriverClass(txtSourceDriver.getText().trim());
        source.setUrl(txtSourceUrl.getText().trim());
        String stmnt=txtSourceStatement.getText().trim();
        stmnt=stmnt.replaceAll(" \n", "  ");
        stmnt=stmnt.replaceAll("\n", "  ");
        source.setStatement(stmnt);
        
        String sParam=txtSourceParam.getText().trim();
        String[] sp=sParam.split("\n");
        for (int i=0; i< sp.length;++i) {
            String[] keyValue=sp[i].split(":=");
            if (keyValue.length!=2) {
                continue;
            }
            Prop p=new Prop();
            p.setKey(keyValue[0]);
            p.setContent(keyValue[1]);
            source.addProp(p);
        }
        
        target.setDriverClass(txtTargetDriver.getText().trim());
        target.setUrl(txtTargetUrl.getText().trim());
        
        String tParam=txtTargetParam.getText().trim();
        String[] tp=tParam.split("\n");
        for (int i=0; i< tp.length;++i) {
            String[] keyValue=tp[i].split(":=");
            if (keyValue.length!=2) {
                continue;
            }
            Prop p=new Prop();
            p.setKey(keyValue[0]);
            //log.debug("Props--"+keyValue[0]+":"+keyValue[1]);
            p.setContent(keyValue[1]);
            target.addProp(p);
        }
        
        
        ci.setSourceJdbcConnectionInfo(source);
        ci.setTargetJdbcConnectionInfo(target);
        return ci;
    }
    
    public void setContent(ConnectionInfo cic) {
        ci=cic;
        if (ci==null) {
            ci=new ConnectionInfo();
            ci.setSourceJdbcConnectionInfo(new SourceJdbcConnectionInfo());
            ci.setTargetJdbcConnectionInfo(new TargetJdbcConnectionInfo());
        }
      //  else {
            
            SourceJdbcConnectionInfo source=ci.getSourceJdbcConnectionInfo();
            if (source!=null) {
                txtSourceDriver.setText(source.getDriverClass());
                txtSourceUrl.setText(source.getUrl());
                
                String stmnt=source.getStatement();
                if (stmnt!=null) {
                    stmnt=stmnt.replaceAll("  ", " \n");
                }
                txtSourceStatement.setText(stmnt);
                Enumeration sProp=source.enumerateProp();
                String sParams="";
                while (sProp.hasMoreElements()) {
                    Prop p=(Prop)sProp.nextElement();
                    sParams=sParams+p.getKey()+":="+p.getContent()+"\n";
                }
                txtSourceParam.setText(sParams.trim());
            }

            TargetJdbcConnectionInfo target=ci.getTargetJdbcConnectionInfo();
            if (target!=null) {
                txtTargetDriver.setText(target.getDriverClass());
                txtTargetUrl.setText(target.getUrl());
                Enumeration tProp=target.enumerateProp();
                String tParams="";
                while (tProp.hasMoreElements()) {
                    Prop p=(Prop)tProp.nextElement();
                    tParams=tParams+p.getKey()+":="+p.getContent()+"\n";
                }
                txtTargetParam.setText(tParams.trim());
            }
        //}
    }    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlMain = new javax.swing.JPanel();
        lblSourceDriver = new javax.swing.JLabel();
        lbSourceUrl = new javax.swing.JLabel();
        lblSourceStatement = new javax.swing.JLabel();
        lblSourceParam = new javax.swing.JLabel();
        lblTargetDriver = new javax.swing.JLabel();
        lblTargetUrl = new javax.swing.JLabel();
        lblTargetParam = new javax.swing.JLabel();
        txtSourceUrl = new javax.swing.JTextField();
        txtTargetUrl = new javax.swing.JTextField();
        txtSourceDriver = new javax.swing.JTextField();
        txtTargetDriver = new javax.swing.JTextField();
        panSourceTitle = new javax.swing.JPanel();
        lblSource = new javax.swing.JLabel();
        sepSource = new javax.swing.JSeparator();
        panTargetTitle = new javax.swing.JPanel();
        lblTarget = new javax.swing.JLabel();
        sepTarget = new javax.swing.JSeparator();
        scpSourceStatement = new javax.swing.JScrollPane();
        txtSourceStatement = new javax.swing.JTextArea();
        scpSourceParam = new javax.swing.JScrollPane();
        txtSourceParam = new javax.swing.JTextArea();
        scpTargetParam = new javax.swing.JScrollPane();
        txtTargetParam = new javax.swing.JTextArea();
        pnlSpace = new javax.swing.JPanel();
        cmdCheckSourceConnection = new javax.swing.JButton();
        cmdCheckTargetConnection = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        setLayout(new java.awt.GridBagLayout());

        pnlMain.setLayout(new java.awt.GridBagLayout());

        lblSourceDriver.setFont(new java.awt.Font("Dialog", 0, 12));
        lblSourceDriver.setText("Treiber");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 10);
        pnlMain.add(lblSourceDriver, gridBagConstraints);

        lbSourceUrl.setFont(new java.awt.Font("Dialog", 0, 12));
        lbSourceUrl.setText("Url");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 10);
        pnlMain.add(lbSourceUrl, gridBagConstraints);

        lblSourceStatement.setFont(new java.awt.Font("Dialog", 0, 12));
        lblSourceStatement.setText("Statement");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 10);
        pnlMain.add(lblSourceStatement, gridBagConstraints);

        lblSourceParam.setFont(new java.awt.Font("Dialog", 0, 12));
        lblSourceParam.setText("zus\u00E4tzl. Parameter");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 10);
        pnlMain.add(lblSourceParam, gridBagConstraints);

        lblTargetDriver.setFont(new java.awt.Font("Dialog", 0, 12));
        lblTargetDriver.setText("Treiber");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 10);
        pnlMain.add(lblTargetDriver, gridBagConstraints);

        lblTargetUrl.setFont(new java.awt.Font("Dialog", 0, 12));
        lblTargetUrl.setText("Url");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 10);
        pnlMain.add(lblTargetUrl, gridBagConstraints);

        lblTargetParam.setFont(new java.awt.Font("Dialog", 0, 12));
        lblTargetParam.setText("zus\u00E4tzl. Parameter");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 10);
        pnlMain.add(lblTargetParam, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 10);
        pnlMain.add(txtSourceUrl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 10);
        pnlMain.add(txtTargetUrl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.7;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 10);
        pnlMain.add(txtSourceDriver, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 10);
        pnlMain.add(txtTargetDriver, gridBagConstraints);

        panSourceTitle.setLayout(new java.awt.GridBagLayout());

        lblSource.setForeground(javax.swing.UIManager.getDefaults().getColor("CheckBoxMenuItem.selectionBackground"));
        lblSource.setText("Datenquelle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        panSourceTitle.add(lblSource, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        panSourceTitle.add(sepSource, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        pnlMain.add(panSourceTitle, gridBagConstraints);

        panTargetTitle.setLayout(new java.awt.GridBagLayout());

        lblTarget.setForeground(javax.swing.UIManager.getDefaults().getColor("CheckBoxMenuItem.selectionBackground"));
        lblTarget.setText("Zielsystem");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        panTargetTitle.add(lblTarget, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        panTargetTitle.add(sepTarget, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 5, 0);
        pnlMain.add(panTargetTitle, gridBagConstraints);

        scpSourceStatement.setViewportView(txtSourceStatement);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 10);
        pnlMain.add(scpSourceStatement, gridBagConstraints);

        scpSourceParam.setViewportView(txtSourceParam);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 10);
        pnlMain.add(scpSourceParam, gridBagConstraints);

        scpTargetParam.setViewportView(txtTargetParam);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 10);
        pnlMain.add(scpTargetParam, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        pnlMain.add(pnlSpace, gridBagConstraints);

        cmdCheckSourceConnection.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/plugins.gif"))); // NOI18N
        cmdCheckSourceConnection.setBorderPainted(false);
        cmdCheckSourceConnection.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/inactive2/plugins.gif"))); // NOI18N
        cmdCheckSourceConnection.setFocusPainted(false);
        cmdCheckSourceConnection.setMargin(new java.awt.Insets(2, 5, 1, 5));
        cmdCheckSourceConnection.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/inactive2/plugins.gif"))); // NOI18N
        cmdCheckSourceConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCheckSourceConnectionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        pnlMain.add(cmdCheckSourceConnection, gridBagConstraints);

        cmdCheckTargetConnection.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/plugins.gif"))); // NOI18N
        cmdCheckTargetConnection.setBorderPainted(false);
        cmdCheckTargetConnection.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/inactive2/plugins.gif"))); // NOI18N
        cmdCheckTargetConnection.setFocusPainted(false);
        cmdCheckTargetConnection.setMargin(new java.awt.Insets(2, 5, 1, 5));
        cmdCheckTargetConnection.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/inactive2/plugins.gif"))); // NOI18N
        cmdCheckTargetConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCheckTargetConnectionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        pnlMain.add(cmdCheckTargetConnection, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(pnlMain, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdCheckTargetConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCheckTargetConnectionActionPerformed
        checkTargetConnection();
    }//GEN-LAST:event_cmdCheckTargetConnectionActionPerformed
    
    public void checkTargetConnection() {
        final String driver=this.txtTargetDriver.getText();
        final String url=this.txtTargetUrl.getText();
        final String props=this.txtTargetParam.getText();
        final Properties pro=new Properties();

        String[] sp=props.split("\n");
        for (int i=0; i< sp.length;++i) {
            String[] keyValue=sp[i].split(":=");
            if (keyValue.length!=2) {
                continue;
            }
            pro.setProperty(keyValue[0],keyValue[1]);
        }
        getMainFrame().setWait(true,true);
        try {
           foxtrot.Worker.post(new foxtrot.Task()
           {
              public Object run() throws Exception
              {
                ///////
                Connection conn=null;
                Class.forName(driver); 
                conn = DriverManager.getConnection(url,pro);

                getMainFrame().addOutput(new OutputTargetConnection(conn));
                ///////
                return null;
              }
           });
        } catch (Exception e) {
            getMainFrame().setWait(false,false);
            JOptionPane.showMessageDialog(this,"Verbindung zur Datenbank konnte nicht aufgebaut werden.\n("+e.toString()+")","Fehler",JOptionPane.ERROR_MESSAGE);
            log.error("Verbindung zur Datenbank konnte nicht aufgebaut werden.",e);
        }
        getMainFrame().setWait(false,false);
        log.info("lief durch");    }
    
    private Import getMainFrame() {
        return ((Import)(getTopLevelAncestor()));
    }
    
    private void cmdCheckSourceConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCheckSourceConnectionActionPerformed
        checkSourceConnection();
    }//GEN-LAST:event_cmdCheckSourceConnectionActionPerformed
    
    
    public void checkSourceConnection() {
        checkSourceConnection(20);
    }
    
    
    public void checkSourceConnection(final int maxRows) {
        final String driver=this.txtSourceDriver.getText();
        final String url=this.txtSourceUrl.getText();
        final String statement=this.txtSourceStatement.getText();
        final String props=this.txtSourceParam.getText();
        final Properties pro=new Properties();

        String[] sp=props.split("\n");
        for (int i=0; i< sp.length;++i) {
            String[] keyValue=sp[i].split(":=");
            if (keyValue.length!=2) {
                continue;
            }
            pro.setProperty(keyValue[0],keyValue[1]);
        }
        getMainFrame().setWait(true,true);
        Object sFields=null;
        try {
           sFields=foxtrot.Worker.post(new foxtrot.Task()
           {
              public Object run() throws Exception
              {
                ///////
                Connection conn=null;
                Class.forName(driver); 
                conn = DriverManager.getConnection(url,pro);
                Statement st=conn.createStatement();
                ResultSet rs=st.executeQuery(statement);
                String[] sourceFields=new String[rs.getMetaData().getColumnCount()];
                for (int i=0;i<rs.getMetaData().getColumnCount();++i) {
                    sourceFields[i]=rs.getMetaData().getColumnName(i+1);
                }
                getMainFrame().addOutput(new OutputSourceConnection(rs, maxRows));
                ///////
                return sourceFields;
              }
           });
           getMainFrame().setSourceFields((String[])sFields);  
        
        } catch (Exception e) {
            getMainFrame().setWait(false,false);
            JOptionPane.showMessageDialog(this,"Verbindung zur Datenbank konnte nicht aufgebaut werden.\n"+e.getMessage(),"Fehler",JOptionPane.ERROR_MESSAGE);
            log.error("Verbindung zur Datenbank konnte nicht aufgebaut werden.",e);
        }
        getMainFrame().setWait(false,false);

    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdCheckSourceConnection;
    private javax.swing.JButton cmdCheckTargetConnection;
    private javax.swing.JLabel lbSourceUrl;
    private javax.swing.JLabel lblSource;
    private javax.swing.JLabel lblSourceDriver;
    private javax.swing.JLabel lblSourceParam;
    private javax.swing.JLabel lblSourceStatement;
    private javax.swing.JLabel lblTarget;
    private javax.swing.JLabel lblTargetDriver;
    private javax.swing.JLabel lblTargetParam;
    private javax.swing.JLabel lblTargetUrl;
    private javax.swing.JPanel panSourceTitle;
    private javax.swing.JPanel panTargetTitle;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlSpace;
    private javax.swing.JScrollPane scpSourceParam;
    private javax.swing.JScrollPane scpSourceStatement;
    private javax.swing.JScrollPane scpTargetParam;
    private javax.swing.JSeparator sepSource;
    private javax.swing.JSeparator sepTarget;
    private javax.swing.JTextField txtSourceDriver;
    private javax.swing.JTextArea txtSourceParam;
    private javax.swing.JTextArea txtSourceStatement;
    private javax.swing.JTextField txtSourceUrl;
    private javax.swing.JTextField txtTargetDriver;
    private javax.swing.JTextArea txtTargetParam;
    private javax.swing.JTextField txtTargetUrl;
    // End of variables declaration//GEN-END:variables
    
}
