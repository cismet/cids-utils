/*
 * RelationsEditor.java
 *
 * Created on 12. November 2003, 15:39
 */

package de.cismet.cids.admin.importAnt.gui;
import de.cismet.cids.admin.importAnt.castorGenerated.*;
import java.util.Enumeration;
import java.io.*;
import javax.swing.table.*;
import de.cismet.common.gui.misc.*;
import java.util.*;
import javax.swing.*;
import java.awt.event.*;


/**
 *
 * @author  hell
 */ 
public class RelationsEditor extends javax.swing.JPanel{
    private final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(this.getClass());
    /** Creates new form RelationsEditor */
    public RelationsEditor() {
        this(null);
    }
    public RelationsEditor(Relations rel) {
        initComponents(); 
        setContent(rel);
    }
    
    public void setContent(Relations rel) {
       if (rel==null) {
           rel=new Relations();
       }
//       TableSorter ts=new TableSorter(new RelationsModel(rel));
       tblRelations.setModel(new RelationsModel(rel));
//       ts.addMouseListenerToHeaderInTable(tblRelations);
       
//       if (getRelationsModel().getRowCount()==0) {
//            getRelationsModel().addRow();
//            getRelationsModel().fireTableDataChanged();
//       }
       
    }
    
    public Relations getContent() {
        return getRelationsModel().returnRelations();
    }

    private RelationsModel getRelationsModel() {
        //return ((RelationsModel)((TableSorter)tblRelations.getModel()).getModel());
            return ((RelationsModel)(tblRelations.getModel()));
    }
    
    public void addRelations(Relations rel) {
        Enumeration enum_=rel.enumerateRelation();
        while (enum_.hasMoreElements()) {
            Relation r=(Relation)enum_.nextElement();
            getRelationsModel().addRelation(r);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        scpRelations = new javax.swing.JScrollPane();
        tblRelations = new javax.swing.JTable();
        cmdDeleteRow = new javax.swing.JButton();
        cmdAddRow = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        scpRelations.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(0, 0, 0, 0)));
        tblRelations.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(0, 0, 0, 0)));
        tblRelations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scpRelations.setViewportView(tblRelations);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(scpRelations, gridBagConstraints);

        cmdDeleteRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/delete_edit.gif")));
        cmdDeleteRow.setBorderPainted(false);
        cmdDeleteRow.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/inactive2/delete_edit.gif")));
        cmdDeleteRow.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/inactive2/delete_edit.gif")));
        cmdDeleteRow.setFocusPainted(false);
        cmdDeleteRow.setMargin(new java.awt.Insets(2, 5, 1, 5));
        cmdDeleteRow.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/inactive2/delete_edit.gif")));
        cmdDeleteRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteRowActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weighty = 1.0;
        add(cmdDeleteRow, gridBagConstraints);

        cmdAddRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/add_att.gif")));
        cmdAddRow.setBorderPainted(false);
        cmdAddRow.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/inactive2/add_att.gif")));
        cmdAddRow.setDisabledSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/inactive2/add_att.gif")));
        cmdAddRow.setFocusPainted(false);
        cmdAddRow.setMargin(new java.awt.Insets(2, 5, 1, 5));
        cmdAddRow.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/inactive2/add_att.gif")));
        cmdAddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddRowActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        add(cmdAddRow, gridBagConstraints);

    }//GEN-END:initComponents

    private void cmdDeleteRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteRowActionPerformed
        int selRow=tblRelations.getSelectedRow();
        if (selRow!=-1) {
            getRelationsModel().removeRow(selRow);
            if (getRelationsModel().getRowCount()>0) {
                if (selRow==0) {
                    this.tblRelations.getSelectionModel().setSelectionInterval(0,0);
                } else {
                    this.tblRelations.getSelectionModel().setSelectionInterval(selRow-1,selRow-1);
                }
            }
        }

    }//GEN-LAST:event_cmdDeleteRowActionPerformed

    private void cmdAddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddRowActionPerformed
        getRelationsModel().addRow();
    }//GEN-LAST:event_cmdAddRowActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdAddRow;
    private javax.swing.JButton cmdDeleteRow;
    private javax.swing.JScrollPane scpRelations;
    private javax.swing.JTable tblRelations;
    // End of variables declaration//GEN-END:variables
    public static void main (String[] args) {
//        FileReader r=new FileReader("C:\\importTest.xml");
//        // aus dem XML File die entsprechende Datenstruktur machen (CASTOR)
//        ImportRules impRules=ImportRules.unmarshal(r);
  
        javax.swing.JFrame frame = new javax.swing.JFrame("SwingApplication");
        RelationsEditor t=new RelationsEditor();
        frame.getContentPane().add(t);

        frame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                System.exit(0);
            }
        });

        
        
        //Finish setting up the frame, and show it.
        frame.pack();
        frame.setVisible(true);
        
    }
}


class RelationsModel extends DefaultTableModel {

    private final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(this.getClass());
    
    final static String ENCLOSING_CHARACTER="'";
    Relations relations;
    String[] cNames= new String[] {"Mastertabelle","Fremdschl\u00FCssel","","Detailtabelle","Prim\u00E4rschl\u00FCssel","Fremdschl\u00FCsselvergleich","SD"};
    Vector rel=new Vector();
    Icon relIcon=null;
    
    public RelationsModel(Relations relations) {
        super();
        this.relations=relations;
        refresh();
    }
    
    public void refresh() {
        Enumeration enum_=relations.enumerateRelation();
        rel.removeAllElements();
        while (enum_.hasMoreElements()) {
            Relation r=(Relation)enum_.nextElement();
            rel.add(r);
        }
    }
    
    public void addRow() {
        Relation newRelation=new Relation();
        rel.add(newRelation);
        this.fireTableDataChanged();
    }
    
    public void addRelation(Relation relation) {
        rel.add(relation);
        this.fireTableDataChanged();
    }
            

    public void removeRow(int row) {
        rel.removeElementAt(row);
        this.fireTableDataChanged();
    }
    
    public Relations returnRelations() {
        Relations ret=new Relations();
        for (int i=0; i< rel.size();++i) {
            ret.addRelation((Relation)rel.elementAt(i));
        }
        return ret;
    }
    
    public Class getColumnClass(int columnIndex) {
        switch (columnIndex) {
            case 0:
                return java.lang.String.class;
            case 1:
                return java.lang.String.class;
            case 2:
                return javax.swing.Icon.class;
            case 3:
                return java.lang.String.class;
            case 4:
                return java.lang.String.class;
            case 5:
                return java.lang.Boolean.class;
            case 6:
                return java.lang.Boolean.class;
        }
        return null;
    }
    
    public int getColumnCount() {
        return 7;
    }
    
    public String getColumnName(int c) {
        return cNames[c];
    }
    
    public int getRowCount() {
        if (rel==null) return 0;
        return rel.size();
    }
     
    public Object getValueAt(int rowIndex,int columnIndex) {
        Relation r=(Relation)rel.get(rowIndex);
        if (r!=null) {
            switch(columnIndex) {
                case 0:
                    if (r.getMasterTable()!=null){
                        return r.getMasterTable().toUpperCase();
                    }
                    else {
                        return null;
                    }
                case 1:
                    return r.getMasterTableForeignKey();
                case 2:
                    return relIcon;
                case 3:
                    if (r.getDetailTable()!=null) {
                        return r.getDetailTable().toUpperCase();
                    }
                    else {
                        return null;
                    }
                case 4:
                    return r.getDetailTableKey();
                case 5:
                    return new Boolean(r.getForeignKeyComparing());
                case 6:
                    Boolean stringOrDate;
                    if (r.getEnclosingChar()==null||r.getEnclosingChar().equals("")) {
                        stringOrDate=new Boolean(false);
                    }
                    else {
                        stringOrDate=new Boolean(true);
                    }
                    return stringOrDate;
            }
        }
        return null;
    }
    
    
    public void setValueAt(Object aValue, int rowIndex, int columnIndex)  {
        Relation r=(Relation)rel.get(rowIndex);
        try {
            switch(columnIndex) {
                case 0:
                    r.setMasterTable(((String)aValue).toUpperCase());
                    break;
                case 1:
                    r.setMasterTableForeignKey((String)aValue);
                    break;
                case 2:
                    break;    
                case 3:
                    r.setDetailTable(((String)aValue).toUpperCase());
                    break;
                case 4:
                    r.setDetailTableKey((String)aValue);
                    break;
                case 5:
                    r.setForeignKeyComparing(((Boolean)aValue).booleanValue()); 
                    break;
                case 6:
                    boolean stringOrDate=((Boolean)aValue).booleanValue();
                    if (stringOrDate) {
                        r.setEnclosingChar(ENCLOSING_CHARACTER);
                    }
                    else {
                        r.setEnclosingChar(null);
                    }
                    break;
            }
        }
        catch (Exception e) {
            log.error("Fehler beim Setzen eines Wertes in der Relationstabelle", e);
        }
    }
            
        
    
}
