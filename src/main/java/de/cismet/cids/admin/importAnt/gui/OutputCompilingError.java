/*
 * OutputCompilingError.java
 *
 * Created on 18. November 2003, 14:38
 */

package de.cismet.cids.admin.importAnt.gui;
import de.cismet.cids.admin.importAnt.*;
import java.awt.*;

/**
 *
 * @author  hell
 */
public class OutputCompilingError extends javax.swing.JInternalFrame {
    
    /** Creates new form OutputCompilingError */
    public OutputCompilingError(DynamicCompilingException dcEx) {
        initComponents();
        
        
        this.setOpaque(false);
        for (int i=0;i<dcEx.getNumberOfErrors();++i) {
            txtOut.append("Fehler "+(i+1)+" -------------------\n");
            String[] desc=dcEx.getErrorDesc(i);
            for (int j=0; j<desc.length; ++j) {
                txtOut.append("  "+desc[j]+"\n");
            }
            txtOut.append("\n\n");
        }

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        scpOut = new javax.swing.JScrollPane();
        txtOut = new javax.swing.JTextArea();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Fehler");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/admin/res/errorwarning_tab.gif")));
        txtOut.setBackground(new java.awt.Color(204, 204, 204));
        txtOut.setEditable(false);
        txtOut.setFont(new java.awt.Font("Dialog", 0, 11));
        txtOut.setForeground(java.awt.Color.red);
        scpOut.setViewportView(txtOut);

        getContentPane().add(scpOut, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scpOut;
    private javax.swing.JTextArea txtOut;
    // End of variables declaration//GEN-END:variables
 
     public void paintChildren(Graphics g) {

        // Cast to Graphics2D so we can set composite information.
        Graphics2D g2d = (Graphics2D)g;

        // Save the original composite.
        Composite oldComp = g2d.getComposite();

        // Create an AlphaComposite with 50% translucency.
        Composite alphaComp = AlphaComposite.getInstance(
                                  AlphaComposite.SRC_OVER, 0.8f);

        // Set the composite on the Graphics2D object.
        g2d.setComposite(alphaComp);

        // Invoke arbitrary paint methods, which will paint
        // with 50% translucency.
     //   g2d.somePaintMethods();
                super.paintChildren(g);


        // Restore the old composite.
        g2d.setComposite(oldComp);
    }
    
}
